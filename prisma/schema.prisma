// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model User {
  id                   String         @id
  username             String         @unique
  displayName          String
  email                String?        @unique
  passwordHash         String?
  googleId             String?        @unique
  avatarUrl            String?
  bio                  String?
  sessions             Session[]
  posts                Post[]
  following            Follow[]       @relation("Following")
  followers            Follow[]       @relation("Followers")
  likes                Like[]
  bookmarks            Bookmark[]
  comments             Comment[]
  recivedNotifications Notification[] @relation("Recipient")
  issuedNotifications  Notification[] @relation("Issuer")

  createdAt DateTime @default(now())

  @@map("bb_users")
}

model Session {
  id        String   @id
  expiresAt DateTime

  userId String
  user   User   @relation(references: [id], fields: [userId], onDelete: Cascade)

  @@map("bb_sessions")
}

model Follow {
  followerId String
  follower   User   @relation("Following", fields: [followerId], references: [id], onDelete: Cascade)

  followingId String
  following   User   @relation("Followers", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
  @@map("bb_follows")
}

model Post {
  id                  String         @id @default(cuid())
  content             String
  attachments         Media[]
  likes               Like[]
  bookmarks           Bookmark[]
  comments            Comment[]
  linkedNotifications Notification[]

  authorId String
  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@map("bb_posts")
}

model Media {
  id   String    @id @default(cuid())
  type MediaType
  url  String

  postId String?
  post   Post?   @relation(fields: [postId], references: [id], onDelete: SetNull)

  createdAt DateTime @default(now())

  @@map("bb_post_medias")
}

model Comment {
  id      String @id @default(cuid())
  content String

  postId String
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)

  authorId String
  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@map("bb_comments")
}

enum MediaType {
  IMAGE
  VIDEO
}

model Like {
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  postId String
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
  @@map("bb_likes")
}

model Bookmark {
  id String @id @default(cuid())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  postId String
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@unique([userId, postId])
  @@map("bb_bookmarks")
}

model Notification {
  id   String           @id @default(cuid())
  type NotificationType
  read Boolean          @default(false)

  recipientId String
  recipient   User   @relation("Recipient", fields: [recipientId], references: [id], onDelete: Cascade)

  issuerId String
  issuer   User   @relation("Issuer", fields: [issuerId], references: [id], onDelete: Cascade)

  postId String?
  post   Post?   @relation(fields: [postId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@map("bb_notifications")
}

enum NotificationType {
  LIKE
  FOLLOW
  COMMENT
}
